import React, { useState } from 'react';
import { Job, JobStatus, jobStatusOptions } from '../types/Job';

/**
 * Define JobFormProps as the TypeScript interface that describes the shape of the props object expected by JobForm (not yet defined)).
 * JobFormPropsincludes a single prop: onJobAdded.
 * Define onJobAdded as a callback function that takes a job object (with everything from the `Job` type except the `id` field) and returns void (i.e., it has no return value).
 */
interface JobFormProps {
  onJobAdded: (job: Omit<Job, 'id'>) => void;
}

/**
 * Define `JobForm` as a React functional component.
 * This component receives a single prop: the `onJobAdded` callback function, which is called when the form is submitted.
 * Inside the component, use `useState` hooks to define and manage local state variables for each form input field.
 * For each variable `x`, `setX` is the corresponding function used to update the state value of `x`.
 */
const JobForm: React.FC<JobFormProps> = ({ onJobAdded }) => {
  // useState hooks create state variables for each form input field
  const [companyName, setCompanyName] = useState('');              // Stores the company name entered by the user
  const [jobTitle, setJobTitle] = useState('');                    // Stores the job title entered by the user
  const [status, setStatus] = useState<JobStatus>('applied');     // Stores the selected job status (default: 'applied')
  const [appliedDate, setAppliedDate] = useState('');              // Stores the selected applied date
  const [notes, setNotes] = useState('');                          // Stores optional notes

  /**
   * define handleSubmit as a function with event e as input. 
   * handleSubmit has no output but does several actions (side effects). 
   */
  const handleSubmit = (e: React.FormEvent) => {
    // Prevents full page reload that normally happens on form submit
    e.preventDefault(); 
    // Define newJob object based on Job form values. 'id' is excluded because it's generated by the backend.
    const newJob: Omit<Job, 'id'> = {
      companyName,
      jobTitle,
      status,
      appliedDate,
      notes,
    };
    // Call the onJobAdded function with newJob as input.
    onJobAdded(newJob);
    // Clear all form input fields to prepare for a new entry
    setCompanyName('');
    setJobTitle('');
    setStatus('applied');
    setAppliedDate('');
    setNotes('');
  };

// The return statement defines the JSX structure of the JobForm component.
// React uses this JSX structure to render the UI.
// This structure includes a form with input fields for company name, job title, status, applied date, and notes.

return (
  <div>
    <h2>Add a Job Application</h2>

    {/* Define a form element.
        onSubmit keyword tells React to attach an event listener to form that listens for the submit event.
        submit event can trigger in two ways:
          1. A user clicks a button with type="submit" inside a <form>.
          2. A user presses Enter while focused on an input field inside the form.  
        handleSubmit is the event handler function that runs when submit occurs. */}
    <form onSubmit={handleSubmit}>
      {/* Input for companyName */}
      <div>
        <label>Company Name:</label>
        <input
          type="text"
          value={companyName}
          onChange={(e) => setCompanyName(e.target.value)} // Update state on user input
          required // HTML5 validation: field cannot be empty
        />
      </div>

      {/* Input for jobTitle */}
      <div>
        <label>Job Title:</label>
        <input
          type="text"
          value={jobTitle}
          onChange={(e) => setJobTitle(e.target.value)}
          required
        />
      </div>

      {/* Dropdown for job status selection */}
      <div>
        <label>Status:</label>
        <select
          value={status}
          onChange={(e) => setStatus(e.target.value as JobStatus)}
          required
        >
          {/* Render an <option> for each status in jobStatusOptions */}
          {jobStatusOptions.map((option) => (
            <option key={option} value={option}>
              {/* Capitalize each word in the option for better readability */}
              {option
                .split(' ')
                .map((word) => word[0].toUpperCase() + word.slice(1))
                .join(' ')}
            </option>
          ))}
        </select>
      </div>

      {/* Input for applied date (type="date" shows a date picker) */}
      <div>
        <label>Applied Date:</label>
        <input
          type="date"
          value={appliedDate}
          onChange={(e) => setAppliedDate(e.target.value)}
          required
        />
      </div>

      {/* Textarea for optional notes */}
      <div>
        <label>Notes:</label>
        <textarea
          value={notes}
          onChange={(e) => setNotes(e.target.value)}
        />
      </div>

      {/* Button to submit the form */}
      <button type="submit">Add Job</button>
    </form>
  </div>
);}
